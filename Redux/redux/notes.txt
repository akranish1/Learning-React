// Redux - Alternative of prop drilling (prop drilling was a headache)
// Centralized store:from where any elements can access the state/data
// Terms - 
// Action {event/object}(It's a [event] or [event+additional info], additional info like ex.- payload, object or data)
// Store {hold states} (It contains state,the data you want to manupulate, it also contains reducers)
// Reducer {functions}(This contains the entire logic for updating or changing a data)
// Slice {features}(The logics of maintaining states for every features is in 'Slice', this contains initial state and reducer function)
// State {data}

// Whole path - 
// UI trigger -> Action dispatch -> store -> reducer -> state update in store -> UI update 
// ex- button click -> handlefunc() -> store -> increment() -> num+1 in store -> num+1 in UI

// Steps - 
// 1. create store (in 'redux' folder)
// 2. wrap the App.js with Provider
// 3. create slice (in 'features' folder)
// 4. create Reducers in slice 
// 5. register the created reducers in the store

// useSelector, dispatch


Yes, exactly! Both useContext and Redux are popular and effective solutions for the problem of prop drilling.
The core idea is that useContext is like a megaphone ðŸ“¢, while Redux is like a direct phone call ðŸ“ž.

//When useContext has an update, it shouts it out to every component that's listening, 
even if they don't care about that specific update. 
//Redux makes a direct call only to the components that need to know about that specific change.


When useContext has an update, it shouts it out to every component that's listening, even if they don't care about that specific update. Redux makes a direct call only to the components that need to know about that specific change.

The Scenario: App Settings
Imagine our app has a global settings object with two properties: a theme ('light' or 'dark') and a notificationCount.

JavaScript
const appSettings = {
  theme: 'light',
  notificationCount: 5
};

We have two separate components that use this data:
ThemeDisplay: Shows the current theme. It only cares about appSettings.theme.
NotificationBell: Shows the notification count. It only cares about appSettings.notificationCount.

The useContext Approach (The Problem)
With useContext, you provide the entire appSettings object as the value.

JavaScript
// A component that only cares about the theme
function ThemeDisplay() {
  const { theme } = useContext(SettingsContext);
  console.log("ThemeDisplay re-rendered!"); // This will run too often
  return <div>Current Theme: {theme}</div>;
}

// A component that only cares about notifications
function NotificationBell() {
  const { notificationCount } = useContext(SettingsContext);
  console.log("NotificationBell re-rendered!");
  return <div>Notifications: {notificationCount}</div>;
}
What happens?
Let's say a new notification arrives. We update the state, increasing notificationCount from 5 to 6.
Because the appSettings object in the context provider has changed, React re-renders every component that consumes that context.

Your console will show:
NotificationBell re-rendered!
ThemeDisplay re-rendered!  // <-- This is the problem!

The ThemeDisplay component re-rendered even though the theme property it cares about ('light') did not change at all.
//=> This is an unnecessary re-render that can slow down your app, especially if the components are complex